Timer unit: 1e-06 s

Total time: 1.02837 s
File: /home/beams0/VNIKITIN/ptychotomoreg/solver_gpu.py
Function: grad_tomo at line 133

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   133                                               @profile
   134                                               # Gradient descent tomography
   135                                               def grad_tomo(self, xi0, xi1, xi2, niter, init, rho, tau, eta):
   136                                                   # normalization coefficient for KR
   137        20      89647.0   4482.4      8.7          r = 1/(xi0.shape[0]*xi0.shape[2]/2)/np.amax(np.abs(xi2)**2)
   138        20      31685.0   1584.2      3.1          res = init.complexform
   139                                                   # for i in range(niter):
   140                                                   #     # R^*K^*K(Rx-xi_0)
   141                                                   #     tmp0 = self.adj_tomo(np.conj(xi2)*xi2*(self.fwd_tomo(res)-xi0))
   142                                                   #     tmp1 = self.adj_reg(self.fwd_reg(res)-xi1)
   143                                                   #     res = res - 2*eta*r*rho*tmp0 - 2*eta*tau*tmp1
   144        20     906763.0  45338.2     88.2          self.cl_tomo.grad_tomo(res,xi0,eta*r,niter)            
   145        20        274.0     13.7      0.0          return objects.Object(res.imag, res.real, self.voxelsize)

Total time: 4.3471 s
File: /home/beams0/VNIKITIN/ptychotomoreg/solver_gpu.py
Function: admm at line 210

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   210                                               @profile
   211                                               # ADMM for ptycho-tomography problem
   212                                               def admm(self, data, h, e, psi, phi, lamd, mu, x, rho, tau, alpha, gamma, eta, piter, titer, NITER):
   213         1          8.0      8.0      0.0          res = np.zeros([NITER, 4], dtype="float32")
   214        21         45.0      2.1      0.0          for m in range(NITER):
   215                                                       # keep previous iteration
   216        20      15174.0    758.7      0.3              psi0, phi0, x0, h0, e0, lamd0, mu0 = psi, phi, x, h, e, lamd, mu
   217                                                       # ptychography problem
   218        20    1195885.0  59794.2     27.5              psi = self.grad_ptycho(data, psi, piter, rho, gamma, h, lamd)
   219                                                       # tomography problem
   220        20     796580.0  39829.0     18.3              xi0, xi1, xi2 = self.takexi(psi, phi, lamd, mu, rho, tau)
   221        20    1028915.0  51445.8     23.7              x = self.grad_tomo(xi0, xi1, xi2, titer, x, rho, tau, eta)
   222                                                       # regularizer problem
   223        20     570405.0  28520.2     13.1              phi = self.solve_reg(x.complexform, mu, tau, alpha)
   224                                                       # h update
   225        20     338842.0  16942.1      7.8              h = self.exptomo(self.fwd_tomo(x.complexform))
   226                                                       # e update
   227        20      79458.0   3972.9      1.8              e = self.fwd_reg(x.complexform)
   228                                                       # lambda update
   229        20      40647.0   2032.3      0.9              lamd = lamd + rho * (psi - h)
   230                                                       # mu update
   231        20      89971.0   4498.6      2.1              mu = mu + tau * (phi - e)
   232                                                       # update rho, tau, alpha for a faster convergence
   233        20         81.0      4.0      0.0              rho, tau, alpha = self.update_penalty(
   234        20     190605.0   9530.2      4.4                  rho, tau, alpha, psi, h, h0, phi, e, e0)
   235                                           
   236                                                       # if conventional approach
   237        20         94.0      4.7      0.0              if(rho < 1e-6):
   238                                                           lamd = lamd*0
   239                                                           psi = h
   240        20         32.0      1.6      0.0              if(tau < 1e-6):
   241                                                           mu = mu*0
   242                                                           phi = e
   243                                           
   244                                                       # check convergence of the Lagrangian
   245        20        361.0     18.1      0.0              if (np.mod(m, 1) == 9999):
   246                                                           res = np.zeros(7, dtype='float32')
   247                                                           res[0] = 0.5 * np.linalg.norm(
   248                                                               np.abs(self.fwd_ptycho(psi))-np.sqrt(data))**2
   249                                                           res[1] = np.sum(np.conj(lamd)*(psi-h))
   250                                                           res[2] = 0.5*rho*np.linalg.norm(psi-h)**2
   251                                                           res[3] = alpha*np.sum(np.sqrt(np.sum(phi*np.conj(phi), 0)))
   252                                                           res[4] = np.sum(
   253                                                               np.conj(mu)*(phi-e))
   254                                                           res[5] = 0.5*tau * \
   255                                                               np.linalg.norm(phi-e)**2
   256                                                           res[6] = np.sum(res[0:5])
   257                                           
   258                                                           print("%d) rho=%.2e, tau=%.2e, Lagrangian terms:  %.2e %.2e %.2e %.2e %.2e %.2e %.2e" %
   259                                                                 (m, rho, tau, res[0], res[1], res[2], res[3], res[4], res[5], res[6]))
   260                                           
   261         1          1.0      1.0      0.0          return x, psi, res

